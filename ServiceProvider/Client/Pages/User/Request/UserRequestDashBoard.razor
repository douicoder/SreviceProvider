@page "/userdashboard"
@inject ChatPropClass prop
@using ServiceProvider.Shared
@using ServiceProvider.Shared.Chats
@inject HttpClient Http

<PageTitle>User DashBoards</PageTitle>

<h1>User DashBoards</h1>

@if (requests == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Problem</th>
                <th>Description</th>
                <th>Pincode</th>
                <th>CreateDate</th>
                <th>ShopName</th>
                <th>Options</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in requests)
            {
                if (forecast.IsDeleated == false)
                {
                    <tr>
                        <td>@forecast.Problem</td>
                        @if (@forecast.Description?.Length > 4)
                        {
                            int length = @forecast.Description.Length - 4;
                            <td>
                                @forecast.Description?.Substring(0, 4)
                                <a @onclick="() => MyServices.ShowDescription(js, forecast.Description)" style="color:blue"><u>see more</u></a>
                            </td>
                        }
                        else
                        {
                            <td>@forecast.Description</td>
                        }
                        <td>@forecast.Pincode</td>
                        <td>@forecast.CreateDate</td>
                        <td>@forecast.ShopName</td>
                        @if (forecast.IsAccepted == false)
                        {
                            <td>
                                <MudButton Class="btnresize" Variant="Variant.Filled" Color="Color.Error" @onclick="() => DeleteRequest(forecast.RequestID)">Delete</MudButton>
                            </td>
                        }
                        @if (forecast.IsAccepted == true)
                        {
                            <td>
                                <MudButton Class="btnresize" Variant="Variant.Filled" Color="Color.Success" @onclick="()=>Onchatclick(forecast)">Chat</MudButton>
                            </td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code
{
    List<GetRequestInfoModel> requests = new List<GetRequestInfoModel>();
    UserModel publicuserModel = new UserModel();

    protected override async Task OnInitializedAsync()
    {
        publicuserModel = await _localstorage.GetItemAsync<UserModel>("currentuser");

        requests = await Http.GetFromJsonAsync<List<GetRequestInfoModel>>("api/Request/GetRequestInfoUser?UserID=" + publicuserModel.ID);
        MyServices.ShowMsg(js, $"hi:    " + requests);
    }

    public async Task DeleteRequest(Guid? requestID)
    {
        MyServices.ShowMsg(js, $"{requestID}");
        var info = requests.Where(c => c.RequestID == requestID).FirstOrDefault();
        if (info != null)
        {
            info.IsDeleated = true;

            var result = await Http.PostAsJsonAsync("api/Request/UpdateRequest", info);
        }
    }

    void Onchatclick(GetRequestInfoModel _obj)
    {
        prop.ShopID = _obj.AcceptedByID;
        prop.UserID = _obj.UserID;
        prop.UserName = _obj.UserName;
        prop.ShopName = _obj.ShopName;
        prop.MessageFrom = _obj.UserName;
        NavigationManager.NavigateTo("/chatwindow");
    }
    //public static ChatPropClass _cp=new ChatPropClass();
}
