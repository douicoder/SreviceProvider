@page "/login"
@using Blazored.LocalStorage
@inject ILocalStorageService _localstorage

<MudContainer>
    <h1>Login</h1>
    <hr />
    <EditForm Model="_loginModel" OnValidSubmit="LoginUser">
        <DataAnnotationsValidator />

        <MudItem>
            <MudTextField Label="Email" @bind-Value="_loginModel.Email" Required="true" InputType="InputType.Email" />
            <ValidationMessage For="@(()=> _loginModel.Email)" />
        </MudItem>

        <MudItem>
            <MudTextField Label="Password" @bind-Value="_loginModel.Password" Required="true" InputType="InputType.Password" />
            <ValidationMessage For="@(()=> _loginModel.Password)" />
        </MudItem>

        <br />

        <MudButton Class="goodbtn" Variant="Variant.Filled" Color="Color.Primary" Type="ButtonType.Submit" @onclick="LoginUser">Login</MudButton>
    </EditForm>
</MudContainer>

@code {
    LoginModel _loginModel = new LoginModel();

      UserModel? publicuserModel = new UserModel();

    private async Task LoginUser()
    {
        var response = await Http.PostAsJsonAsync("api/Account/Login",_loginModel);
        if (response.IsSuccessStatusCode)
        {
            await _localstorage.SetItemAsync("EmailAddress", _loginModel.Email);
            publicuserModel = await Http.GetFromJsonAsync<UserModel>("api/Account/GetUser?email=" + _loginModel.Email);
         await _localstorage.SetItemAsync("currentuser", publicuserModel);
            if (publicuserModel?.CategoryID == 2)
            {
                UserModel publicuserModelnew = await _localstorage.GetItemAsync<UserModel>("currentuser");
                await js.InvokeVoidAsync("alert", "new ID is -" + publicuserModelnew.ID);

               // await js.InvokeVoidAsync("alert", publicuserModel.CategoryID);
                //await js.InvokeVoidAsync("alert", "ID is -"+publicuserModel.ID);
               // NavigationManager.NavigateTo("/serviceproviderprofiledetails");
                NavigationManager.NavigateTo("/raiserequest");
            }
            else   if (publicuserModel?.CategoryID == 1)
                {
                    UserModel publicuserModelnew = await _localstorage.GetItemAsync<UserModel>("currentuser");
                    await js.InvokeVoidAsync("alert", "new ID is -" + publicuserModelnew.ID);

                    // await js.InvokeVoidAsync("alert", publicuserModel.CategoryID);
                    //await js.InvokeVoidAsync("alert", "ID is -"+publicuserModel.ID);
                    // NavigationManager.NavigateTo("/serviceproviderprofiledetails");
                NavigationManager.NavigateTo("/shopacceptdashboard");
                }
  
        }
        else
        {
            await js.InvokeVoidAsync("alert", "Login failed. Please check your email and password.");
        }
    }
}
<style>
    .goodbtn {
        padding: 16px 20px;
        margin: 8px 0;
        border: none;
        cursor: pointer;
        width: 100%;
        opacity: 0.9;
    }</style>